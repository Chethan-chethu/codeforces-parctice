//	B. Digits
//	time limit per test1 second
//	memory limit per test256 megabytes
//	Artem wrote the digit d
//	 on the board exactly n!
//	 times in a row. So, he got the number dddddd…ddd
//	 (exactly n!
//	 digits).
//	
//	Now he is curious about which odd digits from 1
//	 to 9
//	 divide the number written on the board.
//	
//	Input
//	The first line contains a single integer t
//	 (1≤t≤100
//	) — the number of test cases. The next t
//	 test cases follow.
//	
//	Each test case consists of a single line containing two integers n
//	 and d
//	 (2≤n≤109
//	, 1≤d≤9
//	).
//	
//	Output
//	For each test case, output the odd digits in ascending order that divide the number written on the board.
//	
//	Example
//	InputCopy
//	3
//	2 6
//	7 1
//	8 5
//	OutputCopy
//	1 3 
//	1 3 7 9 
//	1 3 5 7 9 
//	Note
//	The factorial of a positive integer n
//	 (n!
//	) is the product of all integers from 1
//	 to n
//	. For example, the factorial of 5
//	 is 1⋅2⋅3⋅4⋅5=120
//	.


package february;

import java.util.ArrayList;
import java.util.Scanner;

public class Digits2043B {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int tests=sc.nextInt();
		while(tests-->0) {
			int n=sc.nextInt();
			int d=sc.nextInt();
			var resList=new ArrayList<Integer>();
			resList.add(1);
			isDivisibleByThree(n,d,resList);
			isDivisibleByFive(n,d,resList);
			isDivisibleBySeven(n,d,resList);
			isDivisibleByNine(n,d,resList);
			for(int val:resList)System.out.print(val+" ");
			System.out.println();
		}
		sc.close();
	}
	
	static void isDivisibleByThree(int n,int d,ArrayList<Integer> resList) {
		if(n>=3 || d%3==0)resList.add(3);
	}
	
	static void isDivisibleByFive(int n,int d,ArrayList<Integer> resList) {
		if(d==5)resList.add(5);
	}
	// when a number is split into blocks of three , the first block is an
	// exception it could be less , and the alternating sum of the blocks
	// which will be the result if it is divisible by seven 
	// then the number is divisible
	// here since all the digits are the same , anything above 2!
	// will be a product of six , so it can definitely be divided into blocks of six 
	// whose alternating sum shall be zero , hence divisible by 7 
	static void isDivisibleBySeven(int n,int d,ArrayList<Integer> resList) {
		if(n>=3 || d==7)resList.add(7);
	}
	
	// anything above 9! will be a multiple of 9 , so brute force for the 
	// cases below 9
	static void isDivisibleByNine(int n,int d,ArrayList<Integer> resList) {
		if(n>=9)resList.add(9);
		else {
			int factorial=1;
			for(int i=2;i<=n;i++)factorial*=i;
			factorial*=d;
			if(factorial%9==0)resList.add(9);
		}		
	}	
}
