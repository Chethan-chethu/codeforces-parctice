//	A. Swap Columns and Find a Path
//	time limit per test2 seconds
//	memory limit per test512 megabytes
//	
//	There is a matrix consisting of 2
//	 rows and n
//	 columns. The rows are numbered from 1
//	 to 2
//	 from top to bottom; the columns are numbered from 1
//	 to n
//	 from left to right. Let's denote the cell on the intersection of the i
//	-th row and the j
//	-th column as (i,j)
//	. Each cell contains an integer; initially, the integer in the cell (i,j)
//	 is ai,j
//	.
//	
//	You can perform the following operation any number of times (possibly zero):
//	
//	choose two columns and swap them (i. e. choose two integers x
//	 and y
//	 such that 1≤x<y≤n
//	, then swap a1,x
//	 with a1,y
//	, and then swap a2,x
//	 with a2,y
//	).
//	After performing the operations, you have to choose a path from the cell (1,1)
//	 to the cell (2,n)
//	. For every cell (i,j)
//	 in the path except for the last, the next cell should be either (i+1,j)
//	 or (i,j+1)
//	. Obviously, the path cannot go outside the matrix.
//	
//	The cost of the path is the sum of all integers in all (n+1)
//	 cells belonging to the path. You have to perform the operations and choose a path so that its cost is maximum possible.
//	
//	Input
//	Each test contains multiple test cases. The first line contains the number of test cases t
//	 (1≤t≤5000
//	). The description of the test cases follows.
//	
//	Each test case consists of three lines:
//	
//	the first line contains one integer n
//	 (1≤n≤5000
//	) — the number of columns in the matrix;
//	the second line contains n
//	 integers a1,1,a1,2,…,a1,n
//	 (−105≤ai,j≤105
//	) — the first row of the matrix;
//	the third line contains n
//	 integers a2,1,a2,2,…,a2,n
//	 (−105≤ai,j≤105
//	) — the second row of the matrix.
//	It is guaranteed that the sum of n
//	 over all test cases does not exceed 5000
//	.
//	
//	Output
//	For each test case, print one integer — the maximum cost of a path you can obtain.
//	
//	Example
//	InputCopy
//	3
//	1
//	-10
//	5
//	3
//	1 2 3
//	10 -5 -3
//	4
//	2 8 5 3
//	1 10 3 4
//	OutputCopy
//	-5
//	16
//	29
//	Note
//	Here are the explanations of the first three test cases of the example. The left matrix is the matrix given in the input, the right one is the state of the matrix after several column swaps (possibly zero). The optimal path is highlighted in green.

package february;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class SwapColumnsAndFindAPath2046A {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int tests=sc.nextInt();
		while(tests-->0) {
			int n=sc.nextInt();
			int[][] a=new int[2][n];
			for(int i=0;i<n;i++) {
				a[0][i]=sc.nextInt();
			}
			for(int i=0;i<n;i++) {
				a[1][i]=sc.nextInt();
			}
			if(n==1) {
				System.out.println(a[0][0]+a[1][0]);
			}else {
				// since we are supposed to maximize , we will try to get three groups here
				// group 1: where the denominators are the highest
				// group 2: where the numerators are the highest
				// group 3: special group which helps in switching from
				// numerator to denominator and this should include
				// both of them in the answer
				// there is no best find , but to only brute force 
				// on each index, expecting that particular index
				// to be of group 3 , there is one simple trick
				// to solve in o(n)
				long sum=0;
				for(int i=0;i<n;i++) {
					sum+=Math.max(a[0][i],a[1][i]);
				}
				long res=Integer.MIN_VALUE;
				for(int i=0;i<n;i++) {
					res=Math.max(res, sum+Math.min(a[0][i],a[1][i]));
				}
				System.out.println(res);
			}			
		}
		sc.close();
	}
}
